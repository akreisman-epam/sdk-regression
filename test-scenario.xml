<project name="Hyperwallet sdk api test" default="testApi" basedir=".">

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="./lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <property name="distDir" location="dist"/>
    <property name="sdkDir" location="${distDir}/sdk"/>
    <property name="stepsDir" location="${distDir}/steps"/>

    <property name="sdkGitRepositoryUrl" value="--should-be-overridden--"/>
    <property name="stepsGitRepositoryUrl" value="--should-be-overridden--"/>

    <property name="runStepCommand" value="--should-be-overridden--"/>
    <property name="runStepCommandArgs" value="--should-be-overridden--"/>

    <property name="stepName_createBankCard" value=""/>
    <property name="stepName_getBankCard" value=""/>
    <property name="stepName_listBankCard" value=""/>
    <property name="stepName_updateBankCard" value=""/>
    <property name="stepName_deactivateBankCard" value=""/>
    <property name="stepName_createBankCardStatusTransition" value=""/>
    <property name="stepName_getBankCardStatusTransition" value=""/>
    <property name="stepName_listBankCardStatusTransition" value=""/>

    <property name="stepName_createPaperCheck" value=""/>
    <property name="stepName_getPaperCheck" value=""/>
    <property name="stepName_listPaperCheck" value=""/>
    <property name="stepName_updatePaperCheck" value=""/>
    <property name="stepName_deactivatePaperCheck" value=""/>
    <property name="stepName_createPaperCheckStatusTransition" value=""/>
    <property name="stepName_getPaperCheckStatusTransition" value=""/>
    <property name="stepName_listPaperCheckStatusTransitions" value=""/>

    <property name="stepName_createTransfer" value=""/>
    <property name="stepName_getTransfer" value=""/>
    <property name="stepName_listTransfer" value=""/>
    <property name="stepName_createTransferStatusTransition" value=""/>

    <property name="stepName_createPayPalAccount" value=""/>
    <property name="stepName_getPayPalAccount" value=""/>
    <property name="stepName_listPayPalAccount" value=""/>

    <property name="stepName_getBankAccountStatusTransition" value=""/>

    <property name="stepName_updatePrepaidCard" value=""/>

    <property name="stepName_createPaymentStatusTransition" value=""/>
    <property name="stepName_getPaymentStatusTransition" value=""/>
    <property name="stepName_listPaymentStatusTransitions" value=""/>

    <property name="stepName_getUserStatusTransition" value=""/>
    <property name="stepName_listUserStatusTransitions" value=""/>

    <property name="hw.username" value="--should-be-overridden--"/>
    <property name="hw.password" value="--should-be-overridden--"/>
    <property name="hw.programToken" value="--should-be-overridden--"/>
    <property name="hw.usernameWithEncryption" value="--should-be-overridden--"/>
    <var name="hw.currentUsername" value="--should-be-overridden--"/>
    <var name="hw.encryptionEnabled" value="false"/>

    <target name="clean">
        <delete dir="${distDir}"/>
    </target>

    <target name="download-sdk" depends="clean">
        <exec logError="true" failonerror="true" executable="git">
            <arg value="clone" />
            <arg value="--depth" />
            <arg value="1" />
            <arg value="${sdkGitRepositoryUrl}" />
            <arg value="${sdkDir}" />
        </exec>
    </target>

    <target name="download-steps" depends="clean">
        <exec logError="true" failonerror="true" executable="git">
            <arg value="clone" />
            <arg value="--depth" />
            <arg value="1" />
            <arg value="${stepsGitRepositoryUrl}" />
            <arg value="${stepsDir}" />
        </exec>
    </target>

    <target name="createUser">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createUserBody"
                srcFile="curl-templates/create-user-curl.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="userResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createUserBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${userResp}"/>
        <propertyregex property="hw.userEmail"
                       input="${userResp}"
                       regexp=".*&quot;email&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <propertyregex property="hw.userToken"
                       input="${userResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="User created: ${hw.userToken}"/>
        <fail unless="hw.userToken"/>
    </target>

    <target name="createUserStatusTransition" depends="createUser">
        <local name="out"/>
        <local name="toStatus"/>
        <loadfile
                property="createUserStatusTransitionBody"
                srcFile="curl-templates/create-user-status-transition.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="out">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/status-transitions"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createUserStatusTransitionBody}"/>
        </exec>
        <propertyregex property="hw.userStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="User Status Transaction created: ${hw.userStatusTransitionToken}"/>
    </target>

    <target name="createBankCard" if="hw.userToken">
        <loadfile
                property="createBankCardBody"
                srcFile="curl-templates/create-bank-card.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="bankCardResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-cards"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankCardBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${bankCardResp}"/>
        <propertyregex property="hw.bankCard2Token"
                       input="${bankCardResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card created: ${hw.bankCard2Token}"/>
        <fail unless="hw.bankCard2Token"/>
    </target>

    <target name="createPaperCheck" if="hw.userToken">
        <loadfile
                property="createPaperCheckBody"
                srcFile="curl-templates/create-paper-check.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="paperCheckResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/paper-checks"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPaperCheckBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${paperCheckResp}"/>
        <propertyregex property="hw.paperCheck2Token"
                       input="${paperCheckResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check created: ${hw.paperCheck2Token}"/>
        <fail unless="hw.paperCheck2Token"/>
    </target>

    <target name="createTransfer" if="hw.userToken, hw.paperCheck2Token">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createTransferBody"
                srcFile="curl-templates/create-transfer.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="transferResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/transfers"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createTransferBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${transferResp}"/>
        <propertyregex property="hw.transfer2Token"
                       input="${transferResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Transfer created: ${hw.transfer2Token}"/>
        <fail unless="hw.transfer2Token"/>
    </target>

    <target name="createPayPalAccount" if="hw.userToken, hw.userEmail">
        <loadfile
                property="createPayPalAccountBody"
                srcFile="curl-templates/create-paypal-account.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="payPalAccountResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/paypal-accounts"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPayPalAccountBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${payPalAccountResp}"/>
        <propertyregex property="hw.payPalAccount2Token"
                       input="${payPalAccountResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="PayPal account created: ${hw.payPalAccount2Token}"/>
        <fail unless="hw.payPalAccount2Token"/>
    </target>

    <target name="createBankAccount" if="hw.userToken">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createBankAccountBody"
                srcFile="curl-templates/create-bank-account.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="bankAccountResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-accounts"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankAccountBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${bankAccountResp}"/>
        <propertyregex property="hw.bankAccountToken"
                       input="${bankAccountResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Account created: ${hw.bankAccountToken}"/>
        <fail unless="hw.bankAccountToken"/>
    </target>

    <target name="createPayment" if="hw.userToken">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyy-MM-dd'T'hh:mm:ss" offset="3" unit="month"/>
        </tstamp>
        <loadfile
                property="createPaymentBody"
                srcFile="curl-templates/create-payment.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="paymentResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/payments"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPaymentBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${paymentResp}"/>
        <propertyregex property="hw.paymentToken"
                       input="${paymentResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Payment created: ${hw.paymentToken}"/>
        <fail unless="hw.paymentToken"/>
    </target>

    <target name="createPaymentForTransfer" if="hw.userToken">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyy-MM-dd'T'hh:mm:ss" offset="3" unit="month"/>
        </tstamp>
        <loadfile
                property="createPaymentForTransferBody"
                srcFile="curl-templates/create-payment-for-transfer.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="paymentForTransferResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/payments"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPaymentForTransferBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${paymentForTransferResp}"/>
        <propertyregex property="hw.paymentForTransferToken"
                       input="${paymentForTransferResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Payment created: ${hw.paymentForTransferToken}"/>
        <fail unless="hw.paymentForTransferToken"/>
    </target>

    <!--            -->
    <!-- BANK CARDS -->
    <!--            -->

    <target name="stepCreateBankCard" depends="createUser">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createBankCard} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} 4216701111102221 ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.bankCardToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card created: ${hw.bankCardToken}"/>
        <fail unless="hw.bankCardToken"/>
    </target>

    <target name="stepGetBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="bankCardType"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getBankCard} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="bankCardType"
                       input="${out}"
                       regexp=".*&quot;type&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${bankCardType} does not equal to BANK_CARD">
            <condition>
                <not>
                    <equals arg1="${bankCardType}" arg2="BANK_CARD"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listBankCard} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepUpdateBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="dateOfExpiry"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_updateBankCard} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken} 2030-12 ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="dateOfExpiry"
                       input="${out}"
                       regexp=".*&quot;dateOfExpiry&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${dateOfExpiry} does not equal to 2030-12">
            <condition>
                <not>
                    <equals arg1="${dateOfExpiry}" arg2="2030-12"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepDeactivateBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="toStatus"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_deactivateBankCard} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail  message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepCreateBankCardStatusTransition" depends="createUser, createBankCard">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createBankCardStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.bankCardStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card Transition created: ${hw.bankCardStatusTransitionToken}"/>
        <fail unless="hw.bankCardStatusTransitionToken"/>
    </target>

    <target name="stepGetBankCardStatusTransition" depends="stepCreateBankCardStatusTransition">
        <local name="out"/>
        <local name="toStatus"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
        <arg line="${runStepCommandArgs} ${stepName_getBankCardStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token} ${hw.bankCardStatusTransitionToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListBankCardStatusTransition" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
        <arg line="${runStepCommandArgs} ${stepName_listBankCardStatusTransitions} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--              -->
    <!-- PAPER CHECKS -->
    <!--              -->


    <target name="stepCreatePaperCheck" depends="createUser">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaperCheck} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paperCheckToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check created: ${hw.paperCheckToken}"/>
        <fail unless="hw.paperCheckToken"/>
    </target>

    <target name="stepGetPaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="paperCheckType"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getPaperCheck} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="paperCheckType"
                       input="${out}"
                       regexp=".*&quot;type&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${paperCheckType} does not equal to PAPER_CHECK">
            <condition>
                <not>
                    <equals arg1="${paperCheckType}" arg2="PAPER_CHECK"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListPaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listPaperCheck} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepUpdatePaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="addressLine1"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_updatePaperCheck} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken} SomeAddress ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="addressLine1"
                       input="${out}"
                       regexp=".*&quot;addressLine1&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${addressLine1} does not equal to SomeAddress">
            <condition>
                <not>
                    <equals arg1="${addressLine1}" arg2="SomeAddress"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepDeactivatePaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="toStatus"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_deactivatePaperCheck} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail  message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepCreatePaperCheckStatusTransition" depends="createUser, createPaperCheck">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaperCheckStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paperCheckStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check Transition created: ${hw.paperCheckStatusTransitionToken}"/>
        <fail unless="hw.paperCheckStatusTransitionToken"/>
    </target>

    <target name="stepGetPaperCheckStatusTransition" depends="stepCreatePaperCheckStatusTransition">
        <local name="out"/>
        <local name="toStatus"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getPaperCheckStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token} ${hw.paperCheckStatusTransitionToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListPaperCheckStatusTransition" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listPaperCheckStatusTransitions} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--           -->
    <!-- TRANSFERS -->
    <!--           -->

    <target name="stepCreateTransfer" depends="createUser, createPaymentForTransfer, stepCreatePaperCheck">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createTransfer} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.transfer2Token"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Transfer created: ${hw.transfer2Token}"/>
        <fail unless="hw.transfer2Token"/>
    </target>

    <target name="stepGetTransfer" depends="stepCreateTransfer">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getTransfer} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.transfer2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.destinationToken"
                       input="${out}"
                       regexp=".*&quot;destinationToken&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${hw.destinationToken} does not equal to ${hw.paperCheckToken}">
            <condition>
                <not>
                    <equals arg1="${hw.destinationToken}" arg2="${hw.paperCheckToken}"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListTransfer" depends="stepCreateTransfer">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listTransfer} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <and>
                    <istrue value="${count}"/>
                    <not>
                        <equals arg1="${count}" arg2="1"/>
                    </not>
                </and>
            </condition>
        </fail>
        <propertyregex property="transferToken"
                       input="${out}"
                       regexp=".+(${hw.transfer2Token})"
                       select="\1" />
        <fail message="${transferToken} does not equal to ${hw.transfer2Token}">
            <condition>
                <not>
                    <equals arg1="${transferToken}" arg2="${hw.transfer2Token}"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepCreateTransferStatusTransition" depends="stepCreateTransfer">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createTransferStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.transfer2Token} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.transferStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Transfer Transition created: ${hw.transferStatusTransitionToken}"/>
        <fail unless="hw.transferStatusTransitionToken"/>
    </target>

    <!--                 -->
    <!-- PAYPAL ACCOUNTS -->
    <!--                 -->

    <target name="stepCreatePayPalAccount" depends="createUser">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPayPalAccount} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.userEmail} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.payPalAccountToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="PayPal account created: ${hw.payPalAccountToken}"/>
        <fail unless="hw.payPalAccountToken"/>
    </target>

    <target name="stepGetPayPalAccount" depends="stepCreatePayPalAccount">
        <local name="out"/>
        <local name="payPalAccountType"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getPayPalAccount} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.payPalAccountToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="payPalAccountType"
                       input="${out}"
                       regexp=".*&quot;type&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${payPalAccountType} does not equal to PAYPAL_ACCOUNT">
            <condition>
                <not>
                    <equals arg1="${payPalAccountType}" arg2="PAYPAL_ACCOUNT"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListPayPalAccount" depends="stepCreatePayPalAccount">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listPayPalAccount} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <and>
                    <istrue value="${count}"/>
                    <not>
                        <equals arg1="${count}" arg2="1"/>
                    </not>
                </and>
            </condition>
        </fail>
        <propertyregex property="payPalToken"
                       input="${out}"
                       regexp=".+(${hw.payPalAccountToken})"
                       select="\1" />
        <fail message="${payPalToken} does not equal to ${hw.payPalAccountToken}">
            <condition>
                <not>
                    <equals arg1="${payPalToken}" arg2="${hw.payPalAccountToken}"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--              -->
    <!-- Bank Account -->
    <!--              -->
    <target name="stepGetBankAccountStatusTransition" depends="createUser, createBankAccount">
        <local name="out"/>
        <local name="toStatus"/>
        <loadfile
                property="createBankAccountStatusTransitionBody"
                srcFile="curl-templates/create-bank-account-status-transition.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="out">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-accounts/${hw.bankAccountToken}/status-transitions"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankAccountStatusTransitionBody}"/>
        </exec>
        <propertyregex property="hw.bankAccountStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Account Status Transaction created: ${hw.bankAccountStatusTransitionToken}"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getBankAccountStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankAccountToken} ${hw.bankAccountStatusTransitionToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--               -->
    <!-- Prepaid Cards -->
    <!--               -->
    <target name="createPrepaidCard" depends="createUser">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createPrepaidCardBody"
                srcFile="curl-templates/create-prepaid-card.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec logError="true" failonerror="true" executable="curl" outputproperty="prepaidCardResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/prepaid-cards"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPrepaidCardBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${prepaidCardResp}"/>
        <propertyregex property="hw.prepaidCardToken"
                       input="${prepaidCardResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Prepaid Card created: ${hw.prepaidCardToken}"/>
        <fail unless="hw.prepaidCardToken"/>
    </target>

    <target name="waitPaidCardCreation">
        <!--<retry retrycount="5" retrydelay="60000">-->
            <!--<antcall target="checkPrepaidCardExist"/>-->
        <!--</retry>-->
    </target>

    <target name="checkPrepaidCardExist">
        <exec logError="true" failonerror="true" executable="curl" outputproperty="prepaidCardExist">
            <arg value="-X"/>
            <arg value="GET"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/prepaid-cards/${hw.prepaidCardToken}"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-f"/>
        </exec>
        <fail unless="hw.prepaidCardExist" message="Prepaid Card don't exist yet."/>
    </target>

    <!-- For development use only-->
    <!--<target name="updatePrepaidCard">-->
        <!--<loadfile-->
                <!--property="updatePrepaidCardBody"-->
                <!--srcFile="curl-templates/update-prepaid-card.json">-->
            <!--<filterchain>-->
                <!--<expandproperties/>-->
            <!--</filterchain>-->
        <!--</loadfile>-->
        <!--<exec logError="true" failonerror="true" executable="curl" outputproperty="prepaidCardUpdated">-->
            <!--<arg value="-X"/>-->
            <!--<arg value="PUT"/>-->
            <!--<arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/usr-99be9b7e-6e64-429d-a650-9cef33759d96/prepaid-cards/trm-69a7dcf6-73b9-4791-8626-0de42957f85d"/>-->
            <!--<arg value="-u"/>-->
            <!--<arg value="${hw.username}:${hw.password}"/>-->
            <!--<arg value="-H"/>-->
            <!--<arg value="Content-Type: application/json"/>-->
            <!--<arg value="-H"/>-->
            <!--<arg value="Accept: application/json"/>-->
            <!--<arg value="-d"/>-->
            <!--<arg value="${updatePrepaidCardBody}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE: ${prepaidCardUpdated}"/>-->
    <!--</target>-->

    <target name="stepUpdatePrepaidCard" depends="createPrepaidCard, waitPaidCardCreation">
        <!-- TODO: INVALID_PARAMETER error occurred -->
        <!--<local name="out"/>-->
        <!--<exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">-->
            <!--<arg line="${runStepCommandArgs} ${stepName_updatePrepaidCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.prepaidCardToken}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE:"/>-->
        <!--<echo message="${out}"/>-->
        <!--<propertyregex property="hw.updatePrepaidCardToken"-->
                       <!--input="${out}"-->
                       <!--regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"-->
                       <!--select="\1" />-->
        <!--<echo message="Prepaid card updated: ${hw.updatePrepaidCardToken}"/>-->
        <!--<fail unless="hw.updatePrepaidCardToken"/>-->
    </target>

    <!--          -->
    <!-- Payments -->
    <!--          -->
    <target name="stepCreatePaymentStatusTransition" depends="createUser, createPayment">
        <local name="out"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaymentStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.paymentToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paymentStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Payment Transition created: ${hw.paymentStatusTransitionToken}"/>
        <fail unless="hw.paymentStatusTransitionToken"/>
    </target>

    <!--<target name="stepGetPaymentStatusTransition" depends="stepCreatePaymentStatusTransition">-->
        <!--<local name="out"/>-->
        <!--<local name="toStatus"/>-->
        <!--<exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">-->
            <!--<arg line="${runStepCommandArgs} ${stepName_getPaymentStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.paymentToken} ${hw.paymentStatusTransitionToken}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE:"/>-->
        <!--<echo message="${out}"/>-->
        <!--<propertyregex property="toStatus"-->
                       <!--input="${out}"-->
                       <!--regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"-->
                       <!--select="\1" />-->
        <!--<fail message="${toStatus} does not equal to CANCELLED">-->
            <!--<condition>-->
                <!--<not>-->
                    <!--<equals arg1="${toStatus}" arg2="CANCELLED"/>-->
                <!--</not>-->
            <!--</condition>-->
        <!--</fail>-->
    <!--</target>--> <!-- TODO: clarify "The caller does not have access to the requested resource"-->

    <!--<target name="stepListPaymentStatusTransition" depends="stepCreatePaymentStatusTransition">-->
        <!--<local name="out"/>-->
        <!--<local name="count"/>-->
        <!--<exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">-->
            <!--<arg line="${runStepCommandArgs} ${stepName_listPaymentStatusTransitions} ${hw.username} ${hw.password} ${hw.programToken} ${hw.paymentToken}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE:"/>-->
        <!--<echo message="${out}"/>-->
        <!--<propertyregex property="count"-->
                       <!--input="${out}"-->
                       <!--regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"-->
                       <!--select="\1" />-->
        <!--<fail message="${count} does not equal to 1">-->
            <!--<condition>-->
                <!--<not>-->
                    <!--<equals arg1="${count}" arg2="1"/>-->
                <!--</not>-->
            <!--</condition>-->
        <!--</fail>-->
    <!--</target>--> <!-- TODO: clarify "The caller does not have access to the requested resource"-->

    <!--                        -->
    <!-- User -->
    <!--                        -->
    <target name="stepListUserStatusTransition" depends="createUserStatusTransition">
        <local name="out"/>
        <local name="count"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listUserStatusTransitions} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepGetUserStatusTransition" depends="createUserStatusTransition">
        <local name="out"/>
        <local name="toStatus"/>
        <exec logError="true" failonerror="true" executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getUserStatusTransition} ${hw.currentUsername} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.userStatusTransitionToken} ${hw.encryptionEnabled}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to LOCKED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="LOCKED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="switchOnEncryption">
        <var name="hw.encryptionEnabled" value="true"/>
        <var name="hw.currentUsername" value="${hw.usernameWithEncryption}"/>
        <var name="hw.currentContentType" value="Content-Type: application/jose+json"/>
    </target>

    <target name="switchOffEncryption">
        <var name="hw.encryptionEnabled" value="false"/>
        <var name="hw.currentUsername" value="${hw.username}"/>
        <var name="hw.currentContentType" value="Content-Type: application/json"/>
    </target>

    <!--            -->
    <!--            -->
    <!--            -->


    <target name="testBankCards">
        <echo message="No tests"/>
    </target>
    <target name="testPaperChecks">
        <echo message="No tests"/>
    </target>
    <target name="testTransfers">
        <echo message="No tests"/>
    </target>
    <target name="testPayPalAccounts">
        <echo message="No tests"/>
    </target>
    <target name="testBankAccounts">
        <echo message="No tests"/>
    </target>
    <target name="testPrepaidCards">
        <echo message="No tests"/>
    </target>
    <target name="testPayments">
        <echo message="No tests"/>
    </target>

    <target name="testUser">
        <echo message="No tests"/>
    </target>

    <target name="testApi" depends="switchOffEncryption, testBankCards, testTransfers, testPaperChecks, testPayPalAccounts, testBankAccounts, testPrepaidCards, testPayments, testUser"/>

    <target name="testApiWithEncryption" depends="switchOnEncryption, testBankCards, testTransfers, testPaperChecks, testPayPalAccounts, testBankAccounts, testPrepaidCards, testPayments, testUser"/>

    <target name="distSimple" depends="init, testApi"/>

    <target name="distWithEncryption" depends="init, testApiWithEncryption"/>

    <target name="dist">
        <if>
            <equals arg1="${encrypted}" arg2="true"/>
            <then>
                <antcall target="distWithEncryption"/>
            </then>
            <else>
                <antcall target="distSimple"/>
            </else>
        </if>
    </target>

    <target name="init"/>

</project>