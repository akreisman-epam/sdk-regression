<project name="Hyperwallet sdk api test" default="testApi" basedir=".">

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="./lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <property name="distDir" location="dist"/>
    <property name="sdkDir" location="${distDir}/sdk"/>
    <property name="stepsDir" location="${distDir}/steps"/>

    <property name="sdkGitRepositoryUrl" value="--should-be-overridden--"/>
    <property name="stepsGitRepositoryUrl" value="--should-be-overridden--"/>

    <property name="runStepCommand" value="--should-be-overridden--"/>
    <property name="runStepCommandArgs" value="--should-be-overridden--"/>

    <property name="stepName_createBankCard" value=""/>
    <property name="stepName_getBankCard" value=""/>
    <property name="stepName_listBankCard" value=""/>
    <property name="stepName_updateBankCard" value=""/>
    <property name="stepName_deactivateBankCard" value=""/>
    <property name="stepName_createBankCardStatusTransition" value=""/>
    <property name="stepName_getBankCardStatusTransition" value=""/>
    <property name="stepName_listBankCardStatusTransition" value=""/>

    <property name="stepName_createPaperCheck" value=""/>
    <property name="stepName_getPaperCheck" value=""/>
    <property name="stepName_listPaperCheck" value=""/>
    <property name="stepName_updatePaperCheck" value=""/>
    <property name="stepName_deactivatePaperCheck" value=""/>
    <property name="stepName_createPaperCheckStatusTransition" value=""/>
    <property name="stepName_getPaperCheckStatusTransition" value=""/>
    <property name="stepName_listPaperCheckStatusTransitions" value=""/>

    <property name="stepName_getBankAccountStatusTransition" value=""/>

    <property name="stepName_createPaymentStatusTransition" value=""/>
    <property name="stepName_getPaymentStatusTransition" value=""/>
    <property name="stepName_listPaymentStatusTransitions" value=""/>

    <property name="hw.username" value="--should-be-overridden--"/>
    <property name="hw.password" value="--should-be-overridden--"/>
    <property name="hw.programToken" value="--should-be-overridden--"/>

    <target name="clean">
        <delete dir="${distDir}"/>
    </target>

    <target name="download-sdk" depends="clean">
        <exec executable="git">
            <arg value="clone" />
            <arg value="--depth" />
            <arg value="1" />
            <arg value="${sdkGitRepositoryUrl}" />
            <arg value="${sdkDir}" />
        </exec>
    </target>

    <target name="download-steps" depends="clean">
        <exec executable="git">
            <arg value="clone" />
            <arg value="--depth" />
            <arg value="1" />
            <arg value="${stepsGitRepositoryUrl}" />
            <arg value="${stepsDir}" />
        </exec>
    </target>

    <target name="createUser">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createUserBody"
                srcFile="curl-templates/create-user-curl.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="userResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createUserBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${userResp}"/>
        <propertyregex property="hw.userToken"
                       input="${userResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="User created: ${hw.userToken}"/>
        <fail unless="hw.userToken"/>
    </target>

    <target name="createBankCard" if="hw.userToken">
        <loadfile
                property="createBankCardBody"
                srcFile="curl-templates/create-bank-card.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="bankCardResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-cards"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankCardBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${bankCardResp}"/>
        <propertyregex property="hw.bankCard2Token"
                       input="${bankCardResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card created: ${hw.bankCard2Token}"/>
        <fail unless="hw.bankCard2Token"/>
    </target>

    <target name="createPaperCheck" if="hw.userToken">
        <loadfile
                property="createPaperCheckBody"
                srcFile="curl-templates/create-paper-check.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="paperCheckResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/paper-checks"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPaperCheckBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${paperCheckResp}"/>
        <propertyregex property="hw.paperCheck2Token"
                       input="${paperCheckResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check created: ${hw.paperCheck2Token}"/>
        <fail unless="hw.paperCheck2Token"/>
    </target>

    <target name="createBankAccount" if="hw.userToken">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyyMMddhhmmss"/>
        </tstamp>
        <loadfile
                property="createBankAccountBody"
                srcFile="curl-templates/create-bank-account.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="bankAccountResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-accounts"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankAccountBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${bankAccountResp}"/>
        <propertyregex property="hw.bankAccountToken"
                       input="${bankAccountResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Account created: ${hw.bankAccountToken}"/>
        <fail unless="hw.bankAccountToken"/>
    </target>

    <target name="createPayment" if="hw.userToken">
        <local name="touchTime"/>
        <tstamp>
            <format property="touchTime" pattern="yyyy-MM-dd'T'hh:mm:ss" offset="3" unit="month"/>
        </tstamp>
        <loadfile
                property="createPaymentBody"
                srcFile="curl-templates/create-payment.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="paymentResp">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/payments"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createPaymentBody}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${paymentResp}"/>
        <propertyregex property="hw.paymentToken"
                       input="${paymentResp}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Payment created: ${hw.paymentToken}"/>
        <fail unless="hw.paymentToken"/>
    </target>

    <!--            -->
    <!-- BANK CARDS -->
    <!--            -->

    <target name="stepCreateBankCard" depends="createUser">
        <local name="out"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createBankCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} 4216701111102221"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.bankCardToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card created: ${hw.bankCardToken}"/>
        <fail unless="hw.bankCardToken"/>
    </target>

    <target name="stepGetBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="bankCardType"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getBankCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="bankCardType"
                       input="${out}"
                       regexp=".*&quot;type&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${bankCardType} does not equal to BANK_CARD">
            <condition>
                <not>
                    <equals arg1="${bankCardType}" arg2="BANK_CARD"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="count"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listBankCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepUpdateBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="dateOfExpiry"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_updateBankCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken} 2030-12"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="dateOfExpiry"
                       input="${out}"
                       regexp=".*&quot;dateOfExpiry&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${dateOfExpiry} does not equal to 2030-12">
            <condition>
                <not>
                    <equals arg1="${dateOfExpiry}" arg2="2030-12"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepDeactivateBankCard" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="toStatus"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_deactivateBankCard} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCardToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail  message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepCreateBankCardStatusTransition" depends="createUser, createBankCard">
        <local name="out"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createBankCardStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.bankCardStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Card Transition created: ${hw.bankCardStatusTransitionToken}"/>
        <fail unless="hw.bankCardStatusTransitionToken"/>
    </target>

    <target name="stepGetBankCardStatusTransition" depends="stepCreateBankCardStatusTransition">
        <local name="out"/>
        <local name="toStatus"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
        <arg line="${runStepCommandArgs} ${stepName_getBankCardStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token} ${hw.bankCardStatusTransitionToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListBankCardStatusTransition" depends="stepCreateBankCard">
        <local name="out"/>
        <local name="count"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
        <arg line="${runStepCommandArgs} ${stepName_listBankCardStatusTransitions} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankCard2Token}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--              -->
    <!-- PAPER CHECKS -->
    <!--              -->


    <target name="stepCreatePaperCheck" depends="createUser">
        <local name="out"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaperCheck} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paperCheckToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check created: ${hw.paperCheckToken}"/>
        <fail unless="hw.paperCheckToken"/>
    </target>

    <target name="stepGetPaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="paperCheckType"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getPaperCheck} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="paperCheckType"
                       input="${out}"
                       regexp=".*&quot;type&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${paperCheckType} does not equal to PAPER_CHECK">
            <condition>
                <not>
                    <equals arg1="${paperCheckType}" arg2="PAPER_CHECK"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListPaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="count"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listPaperCheck} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 1">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="1"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepUpdatePaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="addressLine1"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_updatePaperCheck} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken} SomeAddress"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="addressLine1"
                       input="${out}"
                       regexp=".*&quot;addressLine1&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${addressLine1} does not equal to SomeAddress">
            <condition>
                <not>
                    <equals arg1="${addressLine1}" arg2="SomeAddress"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepDeactivatePaperCheck" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="toStatus"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_deactivatePaperCheck} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheckToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail  message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepCreatePaperCheckStatusTransition" depends="createUser, createPaperCheck">
        <local name="out"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaperCheckStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paperCheckStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Paper Check Transition created: ${hw.paperCheckStatusTransitionToken}"/>
        <fail unless="hw.paperCheckStatusTransitionToken"/>
    </target>

    <target name="stepGetPaperCheckStatusTransition" depends="stepCreatePaperCheckStatusTransition">
        <local name="out"/>
        <local name="toStatus"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getPaperCheckStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token} ${hw.paperCheckStatusTransitionToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="stepListPaperCheckStatusTransition" depends="stepCreatePaperCheck">
        <local name="out"/>
        <local name="count"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_listPaperCheckStatusTransitions} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.paperCheck2Token}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="count"
                       input="${out}"
                       regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"
                       select="\1" />
        <fail message="${count} does not equal to 3">
            <condition>
                <not>
                    <equals arg1="${count}" arg2="3"/> <!-- TODO: Improve this -->
                </not>
            </condition>
        </fail>
    </target>

    <!--              -->
    <!-- Bank Account -->
    <!--              -->
    <target name="stepGetBankAccountStatusTransition" depends="createUser, createBankAccount">
        <local name="out"/>
        <local name="toStatus"/>
        <loadfile
                property="createBankAccountStatusTransitionBody"
                srcFile="curl-templates/create-bank-account-status-transition.json">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <exec executable="curl" outputproperty="out">
            <arg value="-X"/>
            <arg value="POST"/>
            <arg value="https://api.sandbox.hyperwallet.com/rest/v3/users/${hw.userToken}/bank-accounts/${hw.bankAccountToken}/status-transitions"/>
            <arg value="-u"/>
            <arg value="${hw.username}:${hw.password}"/>
            <arg value="-H"/>
            <arg value="Content-Type: application/json"/>
            <arg value="-H"/>
            <arg value="Accept: application/json"/>
            <arg value="-d"/>
            <arg value="${createBankAccountStatusTransitionBody}"/>
        </exec>
        <propertyregex property="hw.bankAccountStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Bank Account Status Transaction created: ${hw.bankAccountStatusTransitionToken}"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_getBankAccountStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.userToken} ${hw.bankAccountToken} ${hw.bankAccountStatusTransitionToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="toStatus"
                       input="${out}"
                       regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <fail message="${toStatus} does not equal to DE_ACTIVATED">
            <condition>
                <not>
                    <equals arg1="${toStatus}" arg2="DE_ACTIVATED"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--          -->
    <!-- Payments -->
    <!--          -->
    <target name="stepCreatePaymentStatusTransition" depends="createUser, createPayment">
        <local name="out"/>
        <exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">
            <arg line="${runStepCommandArgs} ${stepName_createPaymentStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.paymentToken}"/>
        </exec>
        <echo message="RESPONSE:"/>
        <echo message="${out}"/>
        <propertyregex property="hw.paymentStatusTransitionToken"
                       input="${out}"
                       regexp=".*&quot;token&quot;\s*:\s*&quot;([^&quot;]*)"
                       select="\1" />
        <echo message="Payment Transition created: ${hw.paymentStatusTransitionToken}"/>
        <fail unless="hw.paymentStatusTransitionToken"/>
    </target>

    <!--<target name="stepGetPaymentStatusTransition" depends="stepCreatePaymentStatusTransition">-->
        <!--<local name="out"/>-->
        <!--<local name="toStatus"/>-->
        <!--<exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">-->
            <!--<arg line="${runStepCommandArgs} ${stepName_getPaymentStatusTransition} ${hw.username} ${hw.password} ${hw.programToken} ${hw.paymentToken} ${hw.paymentStatusTransitionToken}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE:"/>-->
        <!--<echo message="${out}"/>-->
        <!--<propertyregex property="toStatus"-->
                       <!--input="${out}"-->
                       <!--regexp=".*&quot;toStatus&quot;\s*:\s*&quot;([^&quot;]*)"-->
                       <!--select="\1" />-->
        <!--<fail message="${toStatus} does not equal to CANCELLED">-->
            <!--<condition>-->
                <!--<not>-->
                    <!--<equals arg1="${toStatus}" arg2="CANCELLED"/>-->
                <!--</not>-->
            <!--</condition>-->
        <!--</fail>-->
    <!--</target>--> <!-- TODO: clarify "The caller does not have access to the requested resource"-->

    <!--<target name="stepListPaymentStatusTransition" depends="stepCreatePaymentStatusTransition">-->
        <!--<local name="out"/>-->
        <!--<local name="count"/>-->
        <!--<exec executable="${runStepCommand}" outputproperty="out" dir="${stepsDir}">-->
            <!--<arg line="${runStepCommandArgs} ${stepName_listPaymentStatusTransitions} ${hw.username} ${hw.password} ${hw.programToken} ${hw.paymentToken}"/>-->
        <!--</exec>-->
        <!--<echo message="RESPONSE:"/>-->
        <!--<echo message="${out}"/>-->
        <!--<propertyregex property="count"-->
                       <!--input="${out}"-->
                       <!--regexp=".*&quot;count&quot;\s*:\s*([0-9]*)"-->
                       <!--select="\1" />-->
        <!--<fail message="${count} does not equal to 1">-->
            <!--<condition>-->
                <!--<not>-->
                    <!--<equals arg1="${count}" arg2="1"/>-->
                <!--</not>-->
            <!--</condition>-->
        <!--</fail>-->
    <!--</target>--> <!-- TODO: clarify "The caller does not have access to the requested resource"-->

    <!--            -->
    <!--            -->
    <!--            -->

    <target name="testBankCards" depends="stepCreateBankCard, stepGetBankCard, stepListBankCard, stepUpdateBankCard, stepDeactivateBankCard, stepCreateBankCardStatusTransition, stepGetBankCardStatusTransition, stepListBankCardStatusTransition"/>
    <target name="testPaperChecks" depends="stepCreatePaperCheck, stepGetPaperCheck, stepListPaperCheck, stepUpdatePaperCheck, stepDeactivatePaperCheck, stepCreatePaperCheckStatusTransition, stepGetPaperCheckStatusTransition, stepListPaperCheckStatusTransition"/>
    <target name="testBankAccounts" depends="stepGetBankAccountStatusTransition"/>
    <target name="testPrepaidCards"/>
    <target name="testPayments" depends="stepCreatePaymentStatusTransition"/>

    <target name="testApi" depends="testBankCards, testPaperChecks, testBankAccounts, testPrepaidCards, testPayments"/>

</project>